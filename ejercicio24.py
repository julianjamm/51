# Importamos librer√≠as necesarias
import random   # Para elegir caracteres aleatorios
import string   # Para usar letras, n√∫meros y s√≠mbolos predefinidos

# --- Funci√≥n para generar una contrase√±a segura ---
def generar_contrase√±a(longitud=12):
    # Se combinan letras min√∫sculas y may√∫sculas
    # string.ascii_letters = abc...xyzABC...XYZ
    # string.digits = 0123456789
    # "!@#$%&*" = s√≠mbolos adicionales
    caracteres = string.ascii_letters + string.digits + "!@#$%&*"

    # "".join() une los caracteres seleccionados
    # random.choice(caracteres) elige un car√°cter aleatorio de la lista
    # for _ in range(longitud) repite la selecci√≥n 'longitud' veces
    return "".join(random.choice(caracteres) for _ in range(longitud))

# --- Funci√≥n que eval√∫a la fortaleza de una contrase√±a ---
def evaluar_fortaleza(contrase√±a):
    comentarios = []   # Aqu√≠ guardamos mensajes ‚úî o ‚úò sobre la contrase√±a
    puntos = 0         # Contador de seguridad

    # --- Evaluamos la longitud ---
    if len(contrase√±a) >= 8:           # Si la contrase√±a tiene 8 o m√°s caracteres
        puntos += 2                    # Sumamos 2 puntos (longitud segura)
        comentarios.append("‚úî Longitud adecuada")
    else:                              # Si no cumple
        comentarios.append("‚úò Muy corta (m√≠nimo 8 caracteres)")

    # --- Evaluamos may√∫sculas ---
    if any(c.isupper() for c in contrase√±a):   # any() verifica si existe al menos una may√∫scula
        puntos += 1                            # Sumamos 1 punto
        comentarios.append("‚úî Contiene may√∫sculas")
    else:
        comentarios.append("‚úò Sin may√∫sculas")

    # --- Evaluamos n√∫meros ---
    if any(c.isdigit() for c in contrase√±a):   # any() verifica si existe al menos un n√∫mero
        puntos += 1                            # Sumamos 1 punto
        comentarios.append("‚úî Contiene n√∫meros")
    else:
        comentarios.append("‚úò Sin n√∫meros")

    # --- Evaluaci√≥n final seg√∫n puntos acumulados ---
    if puntos >= 4:            # Si tiene 4 puntos o m√°s
        fortaleza = "Muy fuerte"
    elif puntos == 3:          # Si tiene 3 puntos
        fortaleza = "Fuerte"
    elif puntos == 2:          # Si tiene 2 puntos
        fortaleza = "Moderada"
    else:                      # Si tiene 1 o 0 puntos
        fortaleza = "D√©bil"

    # Retorna la fortaleza y los comentarios
    return fortaleza, comentarios

# --- PROGRAMA PRINCIPAL ---

# Pedimos al usuario que escriba su contrase√±a
contrase√±a = input("Ingrese su contrase√±a:\n")

# Llamamos a la funci√≥n evaluar_fortaleza con la contrase√±a ingresada
fortaleza, comentarios = evaluar_fortaleza(contrase√±a)

# Mostramos un t√≠tulo
print("\nANALIZADOR DE CONTRASE√ëAS")
print("=" * 40)   # Imprime 40 signos "=" como separaci√≥n
print("Resultado:")

# Mostramos la contrase√±a ingresada por el usuario
print(f"Contrase√±a: {contrase√±a}")

# Mostramos la fortaleza calculada (D√©bil, Moderada, Fuerte o Muy fuerte)
print(f"Fortaleza: {fortaleza}")

# Recorremos la lista de comentarios y mostramos cada uno con " - " adelante
for comentario in comentarios:
    print(f" - {comentario}")

# --- Recomendaci√≥n si la contrase√±a no es segura ---
# Si la fortaleza fue D√©bil o Moderada, sugerimos una nueva contrase√±a
if fortaleza in ["D√©bil", "Moderada"]:
    print(f"\nüîë Recomendaci√≥n de contrase√±a segura: {generar_contrase√±a()}")
